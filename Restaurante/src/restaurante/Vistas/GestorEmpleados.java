package restaurante.Vistas;

import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import restaurante.AccesoDatos.EmpleadoData;
import restaurante.Entidades.Empleado;

public class GestorEmpleados extends javax.swing.JInternalFrame {

    EmpleadoData eData = new EmpleadoData();
    Principal ventanaP;

    private DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int x, int y) {
            if (y == 0 || y == 4) {
                return false;
            } else {
                return true;
            }
        }

        @Override
        public Class<?> getColumnClass(int c) {
            if (c == 0 || c == 1) {
                return Integer.class;
            }
            return String.class;
        }
    };

    /**
     * Creates new form EmpleadoVistas
     * @param ventanaPrincipal
     */
    public GestorEmpleados(Principal ventanaPrincipal) {
        initComponents();
        ventanaP = ventanaPrincipal;
        cabeceraTabla();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTEmpleados = new javax.swing.JTable();
        agregarBtn = new javax.swing.JPanel();
        jLAgregar = new javax.swing.JLabel();
        modificarBtn = new javax.swing.JPanel();
        jLModificar = new javax.swing.JLabel();
        eliminarBtn = new javax.swing.JPanel();
        jLEliminar = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Gestor de Empleados");
        setToolTipText("");
        setMaximumSize(new java.awt.Dimension(500, 500));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(25, 25, 25));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 500));

        jScrollPane1.setForeground(new java.awt.Color(60, 63, 65));

        jTEmpleados.setForeground(new java.awt.Color(60, 63, 65));
        jTEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTEmpleados.setSelectionForeground(new java.awt.Color(204, 204, 204));
        jTEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTEmpleadosMouseClicked(evt);
            }
        });
        jTEmpleados.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTEmpleadosPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTEmpleados);

        agregarBtn.setBackground(new java.awt.Color(51, 51, 51));
        agregarBtn.setForeground(new java.awt.Color(51, 51, 51));

        jLAgregar.setBackground(new java.awt.Color(51, 51, 51));
        jLAgregar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLAgregar.setForeground(new java.awt.Color(204, 204, 204));
        jLAgregar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLAgregar.setText("AGREGAR");
        jLAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLAgregarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout agregarBtnLayout = new javax.swing.GroupLayout(agregarBtn);
        agregarBtn.setLayout(agregarBtnLayout);
        agregarBtnLayout.setHorizontalGroup(
            agregarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        agregarBtnLayout.setVerticalGroup(
            agregarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(agregarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLAgregar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        modificarBtn.setBackground(new java.awt.Color(51, 51, 51));
        modificarBtn.setEnabled(false);

        jLModificar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLModificar.setForeground(new java.awt.Color(204, 204, 204));
        jLModificar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLModificar.setText("MODIFICAR");
        jLModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLModificar.setEnabled(false);
        jLModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLModificarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout modificarBtnLayout = new javax.swing.GroupLayout(modificarBtn);
        modificarBtn.setLayout(modificarBtnLayout);
        modificarBtnLayout.setHorizontalGroup(
            modificarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        modificarBtnLayout.setVerticalGroup(
            modificarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modificarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLModificar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        eliminarBtn.setBackground(new java.awt.Color(51, 51, 51));
        eliminarBtn.setForeground(new java.awt.Color(204, 204, 204));
        eliminarBtn.setEnabled(false);

        jLEliminar.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLEliminar.setForeground(new java.awt.Color(204, 204, 204));
        jLEliminar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLEliminar.setText("ELIMINAR");
        jLEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLEliminar.setEnabled(false);
        jLEliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLEliminarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout eliminarBtnLayout = new javax.swing.GroupLayout(eliminarBtn);
        eliminarBtn.setLayout(eliminarBtnLayout);
        eliminarBtnLayout.setHorizontalGroup(
            eliminarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eliminarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        eliminarBtnLayout.setVerticalGroup(
            eliminarBtnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eliminarBtnLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLEliminar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(modificarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modificarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAgregarMouseClicked
        FormularioEmpleados formulario = new FormularioEmpleados(this);

        int x = (ventanaP.getWidth() - formulario.getWidth()) / 2;
        int y = (ventanaP.getHeight() - formulario.getHeight()) / 2;

        // Agregar el formulario al principio de la lista de componentes.
        ventanaP.add(formulario, 0);

        formulario.setLocation(x, y);
        formulario.setVisible(true);
    }//GEN-LAST:event_jLAgregarMouseClicked

    private void jLModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLModificarMouseClicked
        int filas = jTEmpleados.getRowCount();
        List<Empleado> pendientes = new ArrayList<>();

        for (int f = 0; f < filas; f++) {
            int idFila = (Integer) modelo.getValueAt(f, 0);
            int dni = (Integer) modelo.getValueAt(f, 1);
            String nombre = (String) modelo.getValueAt(f, 2);
            String apellido = (String) modelo.getValueAt(f, 3);

            if (!verificarString(nombre) || !verificarString(apellido)) {
                JOptionPane.showMessageDialog(this, "Error en: " + idFila + "\nEl NOMBRE y/o APELLIDO no debe estar vacío y solo contener letras.");
                continue;
            }
            //Revisamos si hay modificación, si la hay agregamos el empleado a un array de pendientes a actualizar, si no el array queda vacío.
            for (Empleado e : eData.listarEmpleadosActivos()) {
                if (e.getIdEmpleado() == idFila && (e.getDni() != dni || !e.getNombre().equals(nombre) || !e.getApellido().equals(apellido))) {
                    e.setDni(dni);
                    e.setNombre(nombre);
                    e.setApellido(apellido);
                    eData.modificarEmpleado(e);
                    pendientes.add(e);
                }
            }
        }
        //Si el array está vacío no hay modificaciones
        if (pendientes.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay modificaciones.");
            return;
        }
    }//GEN-LAST:event_jLModificarMouseClicked

    private void jLEliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLEliminarMouseClicked
        int dni = (Integer) modelo.getValueAt(jTEmpleados.getSelectedRow(), 1);
        eData.eliminarEmpleado(dni);
        cargarTabla();
    }//GEN-LAST:event_jLEliminarMouseClicked

    private void jTEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTEmpleadosMouseClicked
        // TODO add your handling code here:
        jLEliminar.setEnabled(true);
        eliminarBtn.setEnabled(true);

    }//GEN-LAST:event_jTEmpleadosMouseClicked

    private void jTEmpleadosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTEmpleadosPropertyChange
        // TODO add your handling code here:
        if (jTEmpleados.isEditing()) {
            jLModificar.setEnabled(true);
            modificarBtn.setEnabled(true);
        }
    }//GEN-LAST:event_jTEmpleadosPropertyChange


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel agregarBtn;
    private javax.swing.JPanel eliminarBtn;
    private javax.swing.JLabel jLAgregar;
    private javax.swing.JLabel jLEliminar;
    private javax.swing.JLabel jLModificar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTEmpleados;
    private javax.swing.JPanel modificarBtn;
    // End of variables declaration//GEN-END:variables

    private void cabeceraTabla() {
        modelo.addColumn("Id Mesero");
        modelo.addColumn("DNI");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("Estado");

        jTEmpleados.setModel(modelo);

        //Centrar títulos de la tabla
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) jTEmpleados.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        //Centrar contenido de tabla
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        jTEmpleados.setDefaultRenderer(Object.class, centerRenderer);

        jTEmpleados.setEditingColumn(1);
        jTEmpleados.setEditingColumn(2);
        jTEmpleados.setEditingColumn(3);
    }

    public void cargarTabla() {
        eliminarFilas();
        for (Empleado empleado : eData.listarEmpleadosActivos()) {
            modelo.addRow(new Object[]{
                empleado.getIdEmpleado(),
                empleado.getDni(),
                empleado.getNombre(),
                empleado.getApellido(),
                empleado.isEstado() == true ? "Activo" : "Inactivo"
            });
        }
    }

    private void eliminarFilas() {
        int filas = jTEmpleados.getRowCount() - 1;
        for (; filas >= 0; filas--) {
            modelo.removeRow(filas);
        }
    }

    private boolean verificarString(String texto) {
        // Verifica que el string no este vacio
        if (texto.isEmpty()) {
            return false;
        }
        // Verifica que el string no contenga numeros 
        for (int i = 0; i < texto.length(); i++) {
            char letra = texto.charAt(i);
            if ((letra < 65 || letra > 90) && (letra < 97 || letra > 122)) {
                return false;
            }
        }
        return true;
    }
}
